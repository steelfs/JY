//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Action/EnemyInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EnemyInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EnemyInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EnemyInputAction"",
    ""maps"": [
        {
            ""name"": ""Enemy"",
            ""id"": ""ff6eef08-3fa7-4310-8142-6817eaf96bbc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""40481731-a1b5-4f88-828c-2e506d42c7fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""a17ba3e5-3568-4467-b16c-119fee227db9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""77ab534a-4bc7-4004-8e1b-22e954a1986f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""0d41d91b-3949-4fe0-87c5-8deb61c24a68"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b97ea1bf-68e7-4823-9bb5-a86fbaf9ce72"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Enemy"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51787bc6-174d-4383-b7df-48ddd82898c5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Enemy"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a71a39ca-2bdd-439f-9708-872ed58cf32b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Enemy"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""957354c4-78d5-4285-ab3c-a24e3a9f0704"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Enemy"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""63e5e9bf-9d9f-41d2-b03a-416afa6b0bdf"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caa60a1c-48db-4081-80e1-fb15bebe438a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Enemy"",
            ""bindingGroup"": ""Enemy"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Enemy
        m_Enemy = asset.FindActionMap("Enemy", throwIfNotFound: true);
        m_Enemy_Move = m_Enemy.FindAction("Move", throwIfNotFound: true);
        m_Enemy_Boost = m_Enemy.FindAction("Boost", throwIfNotFound: true);
        m_Enemy_Fire = m_Enemy.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Enemy
    private readonly InputActionMap m_Enemy;
    private List<IEnemyActions> m_EnemyActionsCallbackInterfaces = new List<IEnemyActions>();
    private readonly InputAction m_Enemy_Move;
    private readonly InputAction m_Enemy_Boost;
    private readonly InputAction m_Enemy_Fire;
    public struct EnemyActions
    {
        private @EnemyInputAction m_Wrapper;
        public EnemyActions(@EnemyInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Enemy_Move;
        public InputAction @Boost => m_Wrapper.m_Enemy_Boost;
        public InputAction @Fire => m_Wrapper.m_Enemy_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Enemy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnemyActions set) { return set.Get(); }
        public void AddCallbacks(IEnemyActions instance)
        {
            if (instance == null || m_Wrapper.m_EnemyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EnemyActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IEnemyActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IEnemyActions instance)
        {
            if (m_Wrapper.m_EnemyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEnemyActions instance)
        {
            foreach (var item in m_Wrapper.m_EnemyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EnemyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EnemyActions @Enemy => new EnemyActions(this);
    private int m_EnemySchemeIndex = -1;
    public InputControlScheme EnemyScheme
    {
        get
        {
            if (m_EnemySchemeIndex == -1) m_EnemySchemeIndex = asset.FindControlSchemeIndex("Enemy");
            return asset.controlSchemes[m_EnemySchemeIndex];
        }
    }
    public interface IEnemyActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
