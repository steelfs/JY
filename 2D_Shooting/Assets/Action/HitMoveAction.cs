//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Action/HitMoveAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HitMoveAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HitMoveAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HitMoveAction"",
    ""maps"": [
        {
            ""name"": ""Hit"",
            ""id"": ""2ac1db88-65a3-4f83-b8dc-57633b410056"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cf423210-fa6c-4a79-a717-4ef1996df7a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""1d28433d-bef2-4157-884f-2a20f70ffabe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""528fbcbf-e85d-476c-b1db-ed9554777544"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""56cebe05-8f95-45ba-b674-3cb1bc5f1bd6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""HitMoveAction"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""635c8c18-6e54-4e19-a080-68f8e718aa18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""HitMoveAction"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""56c97123-903e-470e-ba6c-6e8d65369ede"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""HitMoveAction"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""800ce80c-1a9e-4fa1-9830-8462cd8484a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""HitMoveAction"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21eab538-f082-491a-850e-02e85c9a26e5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""HitMoveAction"",
            ""bindingGroup"": ""HitMoveAction"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hit
        m_Hit = asset.FindActionMap("Hit", throwIfNotFound: true);
        m_Hit_Move = m_Hit.FindAction("Move", throwIfNotFound: true);
        m_Hit_Boost = m_Hit.FindAction("Boost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hit
    private readonly InputActionMap m_Hit;
    private List<IHitActions> m_HitActionsCallbackInterfaces = new List<IHitActions>();
    private readonly InputAction m_Hit_Move;
    private readonly InputAction m_Hit_Boost;
    public struct HitActions
    {
        private @HitMoveAction m_Wrapper;
        public HitActions(@HitMoveAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Hit_Move;
        public InputAction @Boost => m_Wrapper.m_Hit_Boost;
        public InputActionMap Get() { return m_Wrapper.m_Hit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HitActions set) { return set.Get(); }
        public void AddCallbacks(IHitActions instance)
        {
            if (instance == null || m_Wrapper.m_HitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HitActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(IHitActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(IHitActions instance)
        {
            if (m_Wrapper.m_HitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHitActions instance)
        {
            foreach (var item in m_Wrapper.m_HitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HitActions @Hit => new HitActions(this);
    private int m_HitMoveActionSchemeIndex = -1;
    public InputControlScheme HitMoveActionScheme
    {
        get
        {
            if (m_HitMoveActionSchemeIndex == -1) m_HitMoveActionSchemeIndex = asset.FindControlSchemeIndex("HitMoveAction");
            return asset.controlSchemes[m_HitMoveActionSchemeIndex];
        }
    }
    public interface IHitActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
