//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/__CommonAssets/Events/InputKeyMouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputKeyMouse: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputKeyMouse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputKeyMouse"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6bf7fcac-46d0-4320-9692-0a76b11f1f1a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cea3fd64-0375-4036-a9c7-f16c71e8a4da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""03061f1f-f80d-44a5-a7a0-b6cdd9686339"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""ff788026-fc2b-4f17-a500-ff74e98701d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveMode_Change"",
                    ""type"": ""Button"",
                    ""id"": ""c4a541c8-7952-4ffd-a8ae-6d77bcc5b8f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""28cc21d0-8c95-4dfe-8ffa-293de065a395"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""93d1279a-ec01-427e-92f9-78c4fd1031b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""63fd17a1-a054-4efa-bace-6f46c11b098b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1542847-2a7b-46b0-b170-656cd38e9d98"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4f5ccea-9b87-4783-8aa4-03b2fa6b9216"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b450dbef-4b2d-479b-8ba8-522b177c5f1d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""697f3cc2-99fe-4bd7-a17a-834b7f13e76c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""304553b5-d31b-450b-bf69-8faa5e0054bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7bc88173-7735-4b85-8d40-9c3440e4a0b8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d116796-5c07-4e0e-b0bc-b1b1c1727638"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0597b375-14fd-4bdf-bc4d-157d9750d5b2"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""MultiTap(tapDelay=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMode_Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1d09559-5d32-4d93-ac05-bed70b8280b3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""826b3ea1-09a2-404f-bf3e-069f43ec55f5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78861837-3195-48ce-8e8a-7c83191af496"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""c979b464-daf0-49e0-add5-8f4c5d29e868"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Value"",
                    ""id"": ""17276756-b5d1-4233-8e3e-0f2d5eb9ad66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClickRight"",
                    ""type"": ""Button"",
                    ""id"": ""afb07fd5-ebed-4f3c-a778-9e2e4b9a4089"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Get_Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a274f96-950c-448d-b428-48a891d3fca7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""Value"",
                    ""id"": ""9da44067-4413-4f8e-97e2-6fabd82ff84c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseVector2"",
                    ""type"": ""Value"",
                    ""id"": ""17c065cf-d0fe-494b-8d47-eb65286792af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca353315-0a81-4d86-ad20-0d28ae5fefc1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73933102-520f-4c03-ba39-951ed265350a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""MouseClickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26593f5f-70c9-436f-a786-b81ca81c055e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Get_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e992225a-4c95-4191-ae94-a3dc1bb6fe31"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02abe5bd-c0ba-41e8-a65a-afef668c6706"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""MouseVector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""459b7981-17d4-4cdb-b460-aa8727c82cbd"",
            ""actions"": [
                {
                    ""name"": ""Test1"",
                    ""type"": ""Button"",
                    ""id"": ""e2a7b691-1e40-4aa5-99da-4c03dd54e93f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test2"",
                    ""type"": ""Button"",
                    ""id"": ""9df0db3a-63ec-43f9-9e68-0d988353c2a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test3"",
                    ""type"": ""Button"",
                    ""id"": ""1e0289bf-241d-41cd-9176-fd0a2f06acf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test4"",
                    ""type"": ""Button"",
                    ""id"": ""03ed11f3-8bec-4c40-bbd9-f095f2c54d40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test5"",
                    ""type"": ""Button"",
                    ""id"": ""96d59e6f-7918-4196-8a36-f3c11bfc2d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test6"",
                    ""type"": ""Button"",
                    ""id"": ""72839171-20a6-4bb8-a59a-0e58244a4187"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test7"",
                    ""type"": ""Button"",
                    ""id"": ""9c4d1267-1960-496c-b056-b975c544a935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test8"",
                    ""type"": ""Button"",
                    ""id"": ""f4d8ae40-5195-4ff5-a6c3-69cd987a99ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test9"",
                    ""type"": ""Button"",
                    ""id"": ""263fde5e-d1fe-4d23-bc9a-e59bba47493e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestClick"",
                    ""type"": ""Button"",
                    ""id"": ""ce03a7e5-86f4-43b8-a1c4-421ea1dd879d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30fb653a-f297-4f69-a18e-088cd0dd1fd6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d09cc2ec-e495-48d3-ad2b-99dfcee6de60"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baa0215c-4520-441d-954b-b8324373b3d0"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93c3af3e-f400-4e6d-82cf-47ba02a96cc2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05e51d6a-a305-4b2c-9851-5d7f7195826f"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""303d6395-ae48-4394-9f03-341cf79014ea"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dff415cc-a451-42b7-8c45-90f2bbeabbbb"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29234d7e-6cfc-4cfa-b66a-6a66ff54c2cc"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cb9c2dc-c42a-43c4-a092-936837ebf247"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a1dde6-822d-4836-938e-d9420a5393dc"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Test9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""0c04e0dc-59e0-4a25-a0d2-0f78bde0d4c5"",
            ""actions"": [
                {
                    ""name"": ""RightRotate"",
                    ""type"": ""Button"",
                    ""id"": ""b1ff20a7-071a-4977-a13b-a30e670b5dbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRotate"",
                    ""type"": ""Button"",
                    ""id"": ""6a51fb97-32f0-461b-a5ca-abb04484fe91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10b9e187-3357-4e90-b1cb-0cd0ddf71203"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""LeftRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4938f774-f587-4710-831f-357baa60df75"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""RightRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QuickSlot"",
            ""id"": ""af86c375-5631-440a-ae6f-2fa48dd89f0c"",
            ""actions"": [
                {
                    ""name"": ""PopUp"",
                    ""type"": ""Button"",
                    ""id"": ""ca942b57-ce6b-4099-a6c7-02dd1de64112"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""2bae0ceb-f105-4fae-a2d6-33025c50a88e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Eight"",
                    ""type"": ""Button"",
                    ""id"": ""f549c487-e6b5-4a0c-b4c9-87fc1ee00c74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nine"",
                    ""type"": ""Button"",
                    ""id"": ""e54c0b4d-2ed5-4320-bcea-1cf03702dd49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zero"",
                    ""type"": ""Button"",
                    ""id"": ""7de91f94-f342-4ea8-8837-705bc5f7d016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""0b2ed126-ade9-4f8a-a921-251dc31ffec3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt"",
                    ""type"": ""Button"",
                    ""id"": ""4d4e8752-2091-45be-bfac-f4382f822afb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""113c520c-b01a-4b52-81dd-038dd521282b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Insert"",
                    ""type"": ""Button"",
                    ""id"": ""4719edb9-8c45-4a57-99a6-684b99c92dfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91cae512-e3db-487f-b77c-aa20fc0441d0"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PopUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de65eb02-40ad-429b-aeb0-fc844f764e44"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3801daac-16e8-42c3-944c-ab39a8f23aa2"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c641ddf-1ddd-47ca-ba65-0e7af841e657"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85866115-b48b-4d9d-843c-8d3353b9228e"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zero"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdb13cef-ff81-413c-9110-e7f93ae194eb"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b23e353b-4202-4aeb-8745-3578e4afc967"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fec19cc-9eb1-4f2b-bc23-d86f840fbacc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e32adbc-9835-47d1-9678-396d867eb022"",
                    ""path"": ""<Keyboard>/insert"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Insert"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BattleMap_Player"",
            ""id"": ""6be181be-5035-4140-8f9c-a881b83f29cc"",
            ""actions"": [
                {
                    ""name"": ""UnitMove"",
                    ""type"": ""Value"",
                    ""id"": ""a9df35c9-17f8-4152-bd6a-fbebd6441e39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f23fd2f-204a-40c3-b65a-0f1658ae484f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""UnitMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Inven"",
            ""id"": ""92959d50-8e28-4da4-bdc8-7303c6d89c9d"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""f15c78df-b5cd-4b1a-bbb4-7a2ce677eb03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""b61f79c7-2374-466a-a156-eba9145b8d56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleClick"",
                    ""type"": ""Button"",
                    ""id"": ""c0ba7cde-33c5-4edf-a931-744590f725c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemPickUp"",
                    ""type"": ""Button"",
                    ""id"": ""f1ee8e84-3157-48e6-a764-986fde029bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvenKey"",
                    ""type"": ""Button"",
                    ""id"": ""beba4f3e-c403-42a9-a08e-38e2331a4982"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OptionKey"",
                    ""type"": ""Button"",
                    ""id"": ""9cc30019-aa9b-4547-9d9d-4c3a55791066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StateKey"",
                    ""type"": ""Button"",
                    ""id"": ""15f81dc4-3d17-4d3c-b32c-78824bd12bc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""System"",
                    ""type"": ""Button"",
                    ""id"": ""24dcdb30-ed2d-4582-9a2f-379953cdc49d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EquipBox_Open"",
                    ""type"": ""Button"",
                    ""id"": ""ff48c69b-221d-4266-a2a9-4216030e6d15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillBox_Open"",
                    ""type"": ""Button"",
                    ""id"": ""f1d1648e-58dc-4225-96e5-f17be279868f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Status_Open"",
                    ""type"": ""Button"",
                    ""id"": ""76f9b5d2-2a4e-4f02-b86c-3aa34252cff7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d735b74-c6c2-4ada-9fdb-b4701859d8bf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caeed834-2332-4fde-8a34-af0ca4c3b762"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b960c28f-24e6-4f1b-920b-a0acaf199f2b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4633dd3-211b-4ba9-8703-adb5acf0ff42"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapDelay=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab81b23d-1ba5-47a4-b4e0-7a293505303f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemPickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5f69b83-bd41-4ea8-823f-6437551ddf50"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""InvenKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b622e900-97b8-449b-99d8-3fea582b2c3c"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OptionKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94fed637-7a1d-4a90-860e-5281c525dcd1"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StateKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcc410c1-9ae2-4d5f-8994-e235e1f93afd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""System"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84ae9ca9-d7c9-4bbc-ba5e-e38b45072202"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EquipBox_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22fbffa0-e087-4181-91f4-1f2ce0d840e2"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillBox_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""437f4ef8-29b1-49bc-ba45-2489fc5dccf5"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Status_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Common"",
            ""id"": ""25980614-e1ac-4b1c-b74f-16bde8fc7056"",
            ""actions"": [
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""3dbd4c33-ad89-4799-80cd-db911056b103"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnyKey"",
                    ""type"": ""Button"",
                    ""id"": ""b811016a-f16b-4f1a-9ce2-37015dde01b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d26c431e-a540-4a5c-96c3-94e5cc21191e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84a81ef2-7d40-4b81-944e-a9dcc9ec00c9"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""AnyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Options"",
            ""id"": ""a7517348-2605-4803-977a-a9cfb061e5f7"",
            ""actions"": [
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""0fd2e57a-bb9b-49b1-8c57-070569510226"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quest"",
                    ""type"": ""Button"",
                    ""id"": ""93efd5a5-6301-43ac-b2ce-d6946cc9e048"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0232b0df-105a-45f5-b30c-f916071fb306"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""917edf11-6df7-4c77-9e22-f0b640c16601"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Quest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_MoveMode_Change = m_Player.FindAction("MoveMode_Change", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
        m_Player_Esc = m_Player.FindAction("Esc", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseClick = m_Mouse.FindAction("MouseClick", throwIfNotFound: true);
        m_Mouse_MouseClickRight = m_Mouse.FindAction("MouseClickRight", throwIfNotFound: true);
        m_Mouse_Get_Position = m_Mouse.FindAction("Get_Position", throwIfNotFound: true);
        m_Mouse_MouseWheel = m_Mouse.FindAction("MouseWheel", throwIfNotFound: true);
        m_Mouse_MouseVector2 = m_Mouse.FindAction("MouseVector2", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test1 = m_Test.FindAction("Test1", throwIfNotFound: true);
        m_Test_Test2 = m_Test.FindAction("Test2", throwIfNotFound: true);
        m_Test_Test3 = m_Test.FindAction("Test3", throwIfNotFound: true);
        m_Test_Test4 = m_Test.FindAction("Test4", throwIfNotFound: true);
        m_Test_Test5 = m_Test.FindAction("Test5", throwIfNotFound: true);
        m_Test_Test6 = m_Test.FindAction("Test6", throwIfNotFound: true);
        m_Test_Test7 = m_Test.FindAction("Test7", throwIfNotFound: true);
        m_Test_Test8 = m_Test.FindAction("Test8", throwIfNotFound: true);
        m_Test_Test9 = m_Test.FindAction("Test9", throwIfNotFound: true);
        m_Test_TestClick = m_Test.FindAction("TestClick", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_RightRotate = m_Camera.FindAction("RightRotate", throwIfNotFound: true);
        m_Camera_LeftRotate = m_Camera.FindAction("LeftRotate", throwIfNotFound: true);
        // QuickSlot
        m_QuickSlot = asset.FindActionMap("QuickSlot", throwIfNotFound: true);
        m_QuickSlot_PopUp = m_QuickSlot.FindAction("PopUp", throwIfNotFound: true);
        m_QuickSlot_Shift = m_QuickSlot.FindAction("Shift", throwIfNotFound: true);
        m_QuickSlot_Eight = m_QuickSlot.FindAction("Eight", throwIfNotFound: true);
        m_QuickSlot_Nine = m_QuickSlot.FindAction("Nine", throwIfNotFound: true);
        m_QuickSlot_Zero = m_QuickSlot.FindAction("Zero", throwIfNotFound: true);
        m_QuickSlot_Ctrl = m_QuickSlot.FindAction("Ctrl", throwIfNotFound: true);
        m_QuickSlot_Alt = m_QuickSlot.FindAction("Alt", throwIfNotFound: true);
        m_QuickSlot_Space = m_QuickSlot.FindAction("Space", throwIfNotFound: true);
        m_QuickSlot_Insert = m_QuickSlot.FindAction("Insert", throwIfNotFound: true);
        // BattleMap_Player
        m_BattleMap_Player = asset.FindActionMap("BattleMap_Player", throwIfNotFound: true);
        m_BattleMap_Player_UnitMove = m_BattleMap_Player.FindAction("UnitMove", throwIfNotFound: true);
        // UI_Inven
        m_UI_Inven = asset.FindActionMap("UI_Inven", throwIfNotFound: true);
        m_UI_Inven_Click = m_UI_Inven.FindAction("Click", throwIfNotFound: true);
        m_UI_Inven_Shift = m_UI_Inven.FindAction("Shift", throwIfNotFound: true);
        m_UI_Inven_DoubleClick = m_UI_Inven.FindAction("DoubleClick", throwIfNotFound: true);
        m_UI_Inven_ItemPickUp = m_UI_Inven.FindAction("ItemPickUp", throwIfNotFound: true);
        m_UI_Inven_InvenKey = m_UI_Inven.FindAction("InvenKey", throwIfNotFound: true);
        m_UI_Inven_OptionKey = m_UI_Inven.FindAction("OptionKey", throwIfNotFound: true);
        m_UI_Inven_StateKey = m_UI_Inven.FindAction("StateKey", throwIfNotFound: true);
        m_UI_Inven_System = m_UI_Inven.FindAction("System", throwIfNotFound: true);
        m_UI_Inven_EquipBox_Open = m_UI_Inven.FindAction("EquipBox_Open", throwIfNotFound: true);
        m_UI_Inven_SkillBox_Open = m_UI_Inven.FindAction("SkillBox_Open", throwIfNotFound: true);
        m_UI_Inven_Status_Open = m_UI_Inven.FindAction("Status_Open", throwIfNotFound: true);
        // Common
        m_Common = asset.FindActionMap("Common", throwIfNotFound: true);
        m_Common_Esc = m_Common.FindAction("Esc", throwIfNotFound: true);
        m_Common_AnyKey = m_Common.FindAction("AnyKey", throwIfNotFound: true);
        // Options
        m_Options = asset.FindActionMap("Options", throwIfNotFound: true);
        m_Options_Options = m_Options.FindAction("Options", throwIfNotFound: true);
        m_Options_Quest = m_Options.FindAction("Quest", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_MoveMode_Change;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Action;
    private readonly InputAction m_Player_Esc;
    public struct PlayerActions
    {
        private @InputKeyMouse m_Wrapper;
        public PlayerActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @MoveMode_Change => m_Wrapper.m_Player_MoveMode_Change;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Action => m_Wrapper.m_Player_Action;
        public InputAction @Esc => m_Wrapper.m_Player_Esc;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @MoveMode_Change.started += instance.OnMoveMode_Change;
            @MoveMode_Change.performed += instance.OnMoveMode_Change;
            @MoveMode_Change.canceled += instance.OnMoveMode_Change;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @MoveMode_Change.started -= instance.OnMoveMode_Change;
            @MoveMode_Change.performed -= instance.OnMoveMode_Change;
            @MoveMode_Change.canceled -= instance.OnMoveMode_Change;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseClick;
    private readonly InputAction m_Mouse_MouseClickRight;
    private readonly InputAction m_Mouse_Get_Position;
    private readonly InputAction m_Mouse_MouseWheel;
    private readonly InputAction m_Mouse_MouseVector2;
    public struct MouseActions
    {
        private @InputKeyMouse m_Wrapper;
        public MouseActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_Mouse_MouseClick;
        public InputAction @MouseClickRight => m_Wrapper.m_Mouse_MouseClickRight;
        public InputAction @Get_Position => m_Wrapper.m_Mouse_Get_Position;
        public InputAction @MouseWheel => m_Wrapper.m_Mouse_MouseWheel;
        public InputAction @MouseVector2 => m_Wrapper.m_Mouse_MouseVector2;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @MouseClickRight.started += instance.OnMouseClickRight;
            @MouseClickRight.performed += instance.OnMouseClickRight;
            @MouseClickRight.canceled += instance.OnMouseClickRight;
            @Get_Position.started += instance.OnGet_Position;
            @Get_Position.performed += instance.OnGet_Position;
            @Get_Position.canceled += instance.OnGet_Position;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
            @MouseVector2.started += instance.OnMouseVector2;
            @MouseVector2.performed += instance.OnMouseVector2;
            @MouseVector2.canceled += instance.OnMouseVector2;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @MouseClickRight.started -= instance.OnMouseClickRight;
            @MouseClickRight.performed -= instance.OnMouseClickRight;
            @MouseClickRight.canceled -= instance.OnMouseClickRight;
            @Get_Position.started -= instance.OnGet_Position;
            @Get_Position.performed -= instance.OnGet_Position;
            @Get_Position.canceled -= instance.OnGet_Position;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
            @MouseVector2.started -= instance.OnMouseVector2;
            @MouseVector2.performed -= instance.OnMouseVector2;
            @MouseVector2.canceled -= instance.OnMouseVector2;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test1;
    private readonly InputAction m_Test_Test2;
    private readonly InputAction m_Test_Test3;
    private readonly InputAction m_Test_Test4;
    private readonly InputAction m_Test_Test5;
    private readonly InputAction m_Test_Test6;
    private readonly InputAction m_Test_Test7;
    private readonly InputAction m_Test_Test8;
    private readonly InputAction m_Test_Test9;
    private readonly InputAction m_Test_TestClick;
    public struct TestActions
    {
        private @InputKeyMouse m_Wrapper;
        public TestActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test1 => m_Wrapper.m_Test_Test1;
        public InputAction @Test2 => m_Wrapper.m_Test_Test2;
        public InputAction @Test3 => m_Wrapper.m_Test_Test3;
        public InputAction @Test4 => m_Wrapper.m_Test_Test4;
        public InputAction @Test5 => m_Wrapper.m_Test_Test5;
        public InputAction @Test6 => m_Wrapper.m_Test_Test6;
        public InputAction @Test7 => m_Wrapper.m_Test_Test7;
        public InputAction @Test8 => m_Wrapper.m_Test_Test8;
        public InputAction @Test9 => m_Wrapper.m_Test_Test9;
        public InputAction @TestClick => m_Wrapper.m_Test_TestClick;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test1.started += instance.OnTest1;
            @Test1.performed += instance.OnTest1;
            @Test1.canceled += instance.OnTest1;
            @Test2.started += instance.OnTest2;
            @Test2.performed += instance.OnTest2;
            @Test2.canceled += instance.OnTest2;
            @Test3.started += instance.OnTest3;
            @Test3.performed += instance.OnTest3;
            @Test3.canceled += instance.OnTest3;
            @Test4.started += instance.OnTest4;
            @Test4.performed += instance.OnTest4;
            @Test4.canceled += instance.OnTest4;
            @Test5.started += instance.OnTest5;
            @Test5.performed += instance.OnTest5;
            @Test5.canceled += instance.OnTest5;
            @Test6.started += instance.OnTest6;
            @Test6.performed += instance.OnTest6;
            @Test6.canceled += instance.OnTest6;
            @Test7.started += instance.OnTest7;
            @Test7.performed += instance.OnTest7;
            @Test7.canceled += instance.OnTest7;
            @Test8.started += instance.OnTest8;
            @Test8.performed += instance.OnTest8;
            @Test8.canceled += instance.OnTest8;
            @Test9.started += instance.OnTest9;
            @Test9.performed += instance.OnTest9;
            @Test9.canceled += instance.OnTest9;
            @TestClick.started += instance.OnTestClick;
            @TestClick.performed += instance.OnTestClick;
            @TestClick.canceled += instance.OnTestClick;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test1.started -= instance.OnTest1;
            @Test1.performed -= instance.OnTest1;
            @Test1.canceled -= instance.OnTest1;
            @Test2.started -= instance.OnTest2;
            @Test2.performed -= instance.OnTest2;
            @Test2.canceled -= instance.OnTest2;
            @Test3.started -= instance.OnTest3;
            @Test3.performed -= instance.OnTest3;
            @Test3.canceled -= instance.OnTest3;
            @Test4.started -= instance.OnTest4;
            @Test4.performed -= instance.OnTest4;
            @Test4.canceled -= instance.OnTest4;
            @Test5.started -= instance.OnTest5;
            @Test5.performed -= instance.OnTest5;
            @Test5.canceled -= instance.OnTest5;
            @Test6.started -= instance.OnTest6;
            @Test6.performed -= instance.OnTest6;
            @Test6.canceled -= instance.OnTest6;
            @Test7.started -= instance.OnTest7;
            @Test7.performed -= instance.OnTest7;
            @Test7.canceled -= instance.OnTest7;
            @Test8.started -= instance.OnTest8;
            @Test8.performed -= instance.OnTest8;
            @Test8.canceled -= instance.OnTest8;
            @Test9.started -= instance.OnTest9;
            @Test9.performed -= instance.OnTest9;
            @Test9.canceled -= instance.OnTest9;
            @TestClick.started -= instance.OnTestClick;
            @TestClick.performed -= instance.OnTestClick;
            @TestClick.canceled -= instance.OnTestClick;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_RightRotate;
    private readonly InputAction m_Camera_LeftRotate;
    public struct CameraActions
    {
        private @InputKeyMouse m_Wrapper;
        public CameraActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightRotate => m_Wrapper.m_Camera_RightRotate;
        public InputAction @LeftRotate => m_Wrapper.m_Camera_LeftRotate;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @RightRotate.started += instance.OnRightRotate;
            @RightRotate.performed += instance.OnRightRotate;
            @RightRotate.canceled += instance.OnRightRotate;
            @LeftRotate.started += instance.OnLeftRotate;
            @LeftRotate.performed += instance.OnLeftRotate;
            @LeftRotate.canceled += instance.OnLeftRotate;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @RightRotate.started -= instance.OnRightRotate;
            @RightRotate.performed -= instance.OnRightRotate;
            @RightRotate.canceled -= instance.OnRightRotate;
            @LeftRotate.started -= instance.OnLeftRotate;
            @LeftRotate.performed -= instance.OnLeftRotate;
            @LeftRotate.canceled -= instance.OnLeftRotate;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // QuickSlot
    private readonly InputActionMap m_QuickSlot;
    private List<IQuickSlotActions> m_QuickSlotActionsCallbackInterfaces = new List<IQuickSlotActions>();
    private readonly InputAction m_QuickSlot_PopUp;
    private readonly InputAction m_QuickSlot_Shift;
    private readonly InputAction m_QuickSlot_Eight;
    private readonly InputAction m_QuickSlot_Nine;
    private readonly InputAction m_QuickSlot_Zero;
    private readonly InputAction m_QuickSlot_Ctrl;
    private readonly InputAction m_QuickSlot_Alt;
    private readonly InputAction m_QuickSlot_Space;
    private readonly InputAction m_QuickSlot_Insert;
    public struct QuickSlotActions
    {
        private @InputKeyMouse m_Wrapper;
        public QuickSlotActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @PopUp => m_Wrapper.m_QuickSlot_PopUp;
        public InputAction @Shift => m_Wrapper.m_QuickSlot_Shift;
        public InputAction @Eight => m_Wrapper.m_QuickSlot_Eight;
        public InputAction @Nine => m_Wrapper.m_QuickSlot_Nine;
        public InputAction @Zero => m_Wrapper.m_QuickSlot_Zero;
        public InputAction @Ctrl => m_Wrapper.m_QuickSlot_Ctrl;
        public InputAction @Alt => m_Wrapper.m_QuickSlot_Alt;
        public InputAction @Space => m_Wrapper.m_QuickSlot_Space;
        public InputAction @Insert => m_Wrapper.m_QuickSlot_Insert;
        public InputActionMap Get() { return m_Wrapper.m_QuickSlot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuickSlotActions set) { return set.Get(); }
        public void AddCallbacks(IQuickSlotActions instance)
        {
            if (instance == null || m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Add(instance);
            @PopUp.started += instance.OnPopUp;
            @PopUp.performed += instance.OnPopUp;
            @PopUp.canceled += instance.OnPopUp;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @Eight.started += instance.OnEight;
            @Eight.performed += instance.OnEight;
            @Eight.canceled += instance.OnEight;
            @Nine.started += instance.OnNine;
            @Nine.performed += instance.OnNine;
            @Nine.canceled += instance.OnNine;
            @Zero.started += instance.OnZero;
            @Zero.performed += instance.OnZero;
            @Zero.canceled += instance.OnZero;
            @Ctrl.started += instance.OnCtrl;
            @Ctrl.performed += instance.OnCtrl;
            @Ctrl.canceled += instance.OnCtrl;
            @Alt.started += instance.OnAlt;
            @Alt.performed += instance.OnAlt;
            @Alt.canceled += instance.OnAlt;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @Insert.started += instance.OnInsert;
            @Insert.performed += instance.OnInsert;
            @Insert.canceled += instance.OnInsert;
        }

        private void UnregisterCallbacks(IQuickSlotActions instance)
        {
            @PopUp.started -= instance.OnPopUp;
            @PopUp.performed -= instance.OnPopUp;
            @PopUp.canceled -= instance.OnPopUp;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @Eight.started -= instance.OnEight;
            @Eight.performed -= instance.OnEight;
            @Eight.canceled -= instance.OnEight;
            @Nine.started -= instance.OnNine;
            @Nine.performed -= instance.OnNine;
            @Nine.canceled -= instance.OnNine;
            @Zero.started -= instance.OnZero;
            @Zero.performed -= instance.OnZero;
            @Zero.canceled -= instance.OnZero;
            @Ctrl.started -= instance.OnCtrl;
            @Ctrl.performed -= instance.OnCtrl;
            @Ctrl.canceled -= instance.OnCtrl;
            @Alt.started -= instance.OnAlt;
            @Alt.performed -= instance.OnAlt;
            @Alt.canceled -= instance.OnAlt;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @Insert.started -= instance.OnInsert;
            @Insert.performed -= instance.OnInsert;
            @Insert.canceled -= instance.OnInsert;
        }

        public void RemoveCallbacks(IQuickSlotActions instance)
        {
            if (m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuickSlotActions instance)
        {
            foreach (var item in m_Wrapper.m_QuickSlotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuickSlotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuickSlotActions @QuickSlot => new QuickSlotActions(this);

    // BattleMap_Player
    private readonly InputActionMap m_BattleMap_Player;
    private List<IBattleMap_PlayerActions> m_BattleMap_PlayerActionsCallbackInterfaces = new List<IBattleMap_PlayerActions>();
    private readonly InputAction m_BattleMap_Player_UnitMove;
    public struct BattleMap_PlayerActions
    {
        private @InputKeyMouse m_Wrapper;
        public BattleMap_PlayerActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnitMove => m_Wrapper.m_BattleMap_Player_UnitMove;
        public InputActionMap Get() { return m_Wrapper.m_BattleMap_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleMap_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBattleMap_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Add(instance);
            @UnitMove.started += instance.OnUnitMove;
            @UnitMove.performed += instance.OnUnitMove;
            @UnitMove.canceled += instance.OnUnitMove;
        }

        private void UnregisterCallbacks(IBattleMap_PlayerActions instance)
        {
            @UnitMove.started -= instance.OnUnitMove;
            @UnitMove.performed -= instance.OnUnitMove;
            @UnitMove.canceled -= instance.OnUnitMove;
        }

        public void RemoveCallbacks(IBattleMap_PlayerActions instance)
        {
            if (m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleMap_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleMap_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleMap_PlayerActions @BattleMap_Player => new BattleMap_PlayerActions(this);

    // UI_Inven
    private readonly InputActionMap m_UI_Inven;
    private List<IUI_InvenActions> m_UI_InvenActionsCallbackInterfaces = new List<IUI_InvenActions>();
    private readonly InputAction m_UI_Inven_Click;
    private readonly InputAction m_UI_Inven_Shift;
    private readonly InputAction m_UI_Inven_DoubleClick;
    private readonly InputAction m_UI_Inven_ItemPickUp;
    private readonly InputAction m_UI_Inven_InvenKey;
    private readonly InputAction m_UI_Inven_OptionKey;
    private readonly InputAction m_UI_Inven_StateKey;
    private readonly InputAction m_UI_Inven_System;
    private readonly InputAction m_UI_Inven_EquipBox_Open;
    private readonly InputAction m_UI_Inven_SkillBox_Open;
    private readonly InputAction m_UI_Inven_Status_Open;
    public struct UI_InvenActions
    {
        private @InputKeyMouse m_Wrapper;
        public UI_InvenActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Inven_Click;
        public InputAction @Shift => m_Wrapper.m_UI_Inven_Shift;
        public InputAction @DoubleClick => m_Wrapper.m_UI_Inven_DoubleClick;
        public InputAction @ItemPickUp => m_Wrapper.m_UI_Inven_ItemPickUp;
        public InputAction @InvenKey => m_Wrapper.m_UI_Inven_InvenKey;
        public InputAction @OptionKey => m_Wrapper.m_UI_Inven_OptionKey;
        public InputAction @StateKey => m_Wrapper.m_UI_Inven_StateKey;
        public InputAction @System => m_Wrapper.m_UI_Inven_System;
        public InputAction @EquipBox_Open => m_Wrapper.m_UI_Inven_EquipBox_Open;
        public InputAction @SkillBox_Open => m_Wrapper.m_UI_Inven_SkillBox_Open;
        public InputAction @Status_Open => m_Wrapper.m_UI_Inven_Status_Open;
        public InputActionMap Get() { return m_Wrapper.m_UI_Inven; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_InvenActions set) { return set.Get(); }
        public void AddCallbacks(IUI_InvenActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @DoubleClick.started += instance.OnDoubleClick;
            @DoubleClick.performed += instance.OnDoubleClick;
            @DoubleClick.canceled += instance.OnDoubleClick;
            @ItemPickUp.started += instance.OnItemPickUp;
            @ItemPickUp.performed += instance.OnItemPickUp;
            @ItemPickUp.canceled += instance.OnItemPickUp;
            @InvenKey.started += instance.OnInvenKey;
            @InvenKey.performed += instance.OnInvenKey;
            @InvenKey.canceled += instance.OnInvenKey;
            @OptionKey.started += instance.OnOptionKey;
            @OptionKey.performed += instance.OnOptionKey;
            @OptionKey.canceled += instance.OnOptionKey;
            @StateKey.started += instance.OnStateKey;
            @StateKey.performed += instance.OnStateKey;
            @StateKey.canceled += instance.OnStateKey;
            @System.started += instance.OnSystem;
            @System.performed += instance.OnSystem;
            @System.canceled += instance.OnSystem;
            @EquipBox_Open.started += instance.OnEquipBox_Open;
            @EquipBox_Open.performed += instance.OnEquipBox_Open;
            @EquipBox_Open.canceled += instance.OnEquipBox_Open;
            @SkillBox_Open.started += instance.OnSkillBox_Open;
            @SkillBox_Open.performed += instance.OnSkillBox_Open;
            @SkillBox_Open.canceled += instance.OnSkillBox_Open;
            @Status_Open.started += instance.OnStatus_Open;
            @Status_Open.performed += instance.OnStatus_Open;
            @Status_Open.canceled += instance.OnStatus_Open;
        }

        private void UnregisterCallbacks(IUI_InvenActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @DoubleClick.started -= instance.OnDoubleClick;
            @DoubleClick.performed -= instance.OnDoubleClick;
            @DoubleClick.canceled -= instance.OnDoubleClick;
            @ItemPickUp.started -= instance.OnItemPickUp;
            @ItemPickUp.performed -= instance.OnItemPickUp;
            @ItemPickUp.canceled -= instance.OnItemPickUp;
            @InvenKey.started -= instance.OnInvenKey;
            @InvenKey.performed -= instance.OnInvenKey;
            @InvenKey.canceled -= instance.OnInvenKey;
            @OptionKey.started -= instance.OnOptionKey;
            @OptionKey.performed -= instance.OnOptionKey;
            @OptionKey.canceled -= instance.OnOptionKey;
            @StateKey.started -= instance.OnStateKey;
            @StateKey.performed -= instance.OnStateKey;
            @StateKey.canceled -= instance.OnStateKey;
            @System.started -= instance.OnSystem;
            @System.performed -= instance.OnSystem;
            @System.canceled -= instance.OnSystem;
            @EquipBox_Open.started -= instance.OnEquipBox_Open;
            @EquipBox_Open.performed -= instance.OnEquipBox_Open;
            @EquipBox_Open.canceled -= instance.OnEquipBox_Open;
            @SkillBox_Open.started -= instance.OnSkillBox_Open;
            @SkillBox_Open.performed -= instance.OnSkillBox_Open;
            @SkillBox_Open.canceled -= instance.OnSkillBox_Open;
            @Status_Open.started -= instance.OnStatus_Open;
            @Status_Open.performed -= instance.OnStatus_Open;
            @Status_Open.canceled -= instance.OnStatus_Open;
        }

        public void RemoveCallbacks(IUI_InvenActions instance)
        {
            if (m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_InvenActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_InvenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_InvenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_InvenActions @UI_Inven => new UI_InvenActions(this);

    // Common
    private readonly InputActionMap m_Common;
    private List<ICommonActions> m_CommonActionsCallbackInterfaces = new List<ICommonActions>();
    private readonly InputAction m_Common_Esc;
    private readonly InputAction m_Common_AnyKey;
    public struct CommonActions
    {
        private @InputKeyMouse m_Wrapper;
        public CommonActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Esc => m_Wrapper.m_Common_Esc;
        public InputAction @AnyKey => m_Wrapper.m_Common_AnyKey;
        public InputActionMap Get() { return m_Wrapper.m_Common; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
        public void AddCallbacks(ICommonActions instance)
        {
            if (instance == null || m_Wrapper.m_CommonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommonActionsCallbackInterfaces.Add(instance);
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
            @AnyKey.started += instance.OnAnyKey;
            @AnyKey.performed += instance.OnAnyKey;
            @AnyKey.canceled += instance.OnAnyKey;
        }

        private void UnregisterCallbacks(ICommonActions instance)
        {
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
            @AnyKey.started -= instance.OnAnyKey;
            @AnyKey.performed -= instance.OnAnyKey;
            @AnyKey.canceled -= instance.OnAnyKey;
        }

        public void RemoveCallbacks(ICommonActions instance)
        {
            if (m_Wrapper.m_CommonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommonActions instance)
        {
            foreach (var item in m_Wrapper.m_CommonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommonActions @Common => new CommonActions(this);

    // Options
    private readonly InputActionMap m_Options;
    private List<IOptionsActions> m_OptionsActionsCallbackInterfaces = new List<IOptionsActions>();
    private readonly InputAction m_Options_Options;
    private readonly InputAction m_Options_Quest;
    public struct OptionsActions
    {
        private @InputKeyMouse m_Wrapper;
        public OptionsActions(@InputKeyMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Options => m_Wrapper.m_Options_Options;
        public InputAction @Quest => m_Wrapper.m_Options_Quest;
        public InputActionMap Get() { return m_Wrapper.m_Options; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OptionsActions set) { return set.Get(); }
        public void AddCallbacks(IOptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_OptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OptionsActionsCallbackInterfaces.Add(instance);
            @Options.started += instance.OnOptions;
            @Options.performed += instance.OnOptions;
            @Options.canceled += instance.OnOptions;
            @Quest.started += instance.OnQuest;
            @Quest.performed += instance.OnQuest;
            @Quest.canceled += instance.OnQuest;
        }

        private void UnregisterCallbacks(IOptionsActions instance)
        {
            @Options.started -= instance.OnOptions;
            @Options.performed -= instance.OnOptions;
            @Options.canceled -= instance.OnOptions;
            @Quest.started -= instance.OnQuest;
            @Quest.performed -= instance.OnQuest;
            @Quest.canceled -= instance.OnQuest;
        }

        public void RemoveCallbacks(IOptionsActions instance)
        {
            if (m_Wrapper.m_OptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_OptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OptionsActions @Options => new OptionsActions(this);
    private int m_KeyMouseSchemeIndex = -1;
    public InputControlScheme KeyMouseScheme
    {
        get
        {
            if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
            return asset.controlSchemes[m_KeyMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMoveMode_Change(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseClickRight(InputAction.CallbackContext context);
        void OnGet_Position(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
        void OnMouseVector2(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest1(InputAction.CallbackContext context);
        void OnTest2(InputAction.CallbackContext context);
        void OnTest3(InputAction.CallbackContext context);
        void OnTest4(InputAction.CallbackContext context);
        void OnTest5(InputAction.CallbackContext context);
        void OnTest6(InputAction.CallbackContext context);
        void OnTest7(InputAction.CallbackContext context);
        void OnTest8(InputAction.CallbackContext context);
        void OnTest9(InputAction.CallbackContext context);
        void OnTestClick(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnRightRotate(InputAction.CallbackContext context);
        void OnLeftRotate(InputAction.CallbackContext context);
    }
    public interface IQuickSlotActions
    {
        void OnPopUp(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnEight(InputAction.CallbackContext context);
        void OnNine(InputAction.CallbackContext context);
        void OnZero(InputAction.CallbackContext context);
        void OnCtrl(InputAction.CallbackContext context);
        void OnAlt(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnInsert(InputAction.CallbackContext context);
    }
    public interface IBattleMap_PlayerActions
    {
        void OnUnitMove(InputAction.CallbackContext context);
    }
    public interface IUI_InvenActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnDoubleClick(InputAction.CallbackContext context);
        void OnItemPickUp(InputAction.CallbackContext context);
        void OnInvenKey(InputAction.CallbackContext context);
        void OnOptionKey(InputAction.CallbackContext context);
        void OnStateKey(InputAction.CallbackContext context);
        void OnSystem(InputAction.CallbackContext context);
        void OnEquipBox_Open(InputAction.CallbackContext context);
        void OnSkillBox_Open(InputAction.CallbackContext context);
        void OnStatus_Open(InputAction.CallbackContext context);
    }
    public interface ICommonActions
    {
        void OnEsc(InputAction.CallbackContext context);
        void OnAnyKey(InputAction.CallbackContext context);
    }
    public interface IOptionsActions
    {
        void OnOptions(InputAction.CallbackContext context);
        void OnQuest(InputAction.CallbackContext context);
    }
}
