SlotManager

크게 봤을 때 초기생성(Initialize) - 획득(GetItem) - 버리기(DropItem) - 교환(SwapItem)  기능으로 구성되어있다 

Initialize() => 초기화 진행
{

	아이템 이미지 sprite 배열 리소스폴더에서 가져오기
	isMovingChange 델리게이트에 IsSlotMoving 상태바꾸기 람다식 실행
	slots, slotCount 딕셔너리 초기화
	각 4개의 아이템 탭은 순회하며 slot 10개씩 추가
}

Make_Slot() => 
{
	현재  Current_Inventory_State을 기준으로 
	인스펙터창에서 할당된 parentTransform 의 자식으로 Slot오브젝트 생성, 
	slots 딕셔너리의 키값으로 현재  Current_Inventory_State을 넣어 List에 추가한다. 
}

GetItem() => 파라미터 (ItemBase item)
{
	파라미터로 받은 item을 파라미터로 GetItemTab으 호출해 해당 아이탬이 속한 시르트를 불러온다
	item 과 불러온 리스트를 파라미터로 UpdateSlot함수 호출	
}

List<GameObject>GetItemTab (ItemBase item) => 
{
	파라미터로 받은 item의 public enum인 ItemType을 switch 문으로 돌려 
	해당아이템이 들어갈 리스트를 리턴타입List로 으로 뱉어준다
}

UpdateSlot (ItemBase item, List<GameObject> slotList) 
{
	item.isStackable 일경우 foreach를 돌며 item.name == slot.currentItem이 같은경우 slot.Count만 증가시켜준다
	
	item.isStackable 이 아닐경우 slotList를 foreach순회하며 빈슬롯을 찾는다.
	찾으면 해당 슬롯의 Image 컴포넌트를 가져와서 Enum.GetName()함수를 이용해 string itemName 변수에 할당하고
	sprite 배열을 foreach로 순회하며 spriteName과 sprite 배열 안의 이름이 같으면 해당 이미지를 할당한다.
	slot.IsEmpty를 false로 설정하고 slot.CurrentItem 을 item.name으로 설정한다.	
}

OnSlotClicked (Slot clickedSlot) => slot 오브젝트에서 OnPointerClick 함수에서 자기자신을 파라미터로 호출하는 함수다.
{
	isMovingChange 델리게이트 신호 발생시키기
	미리 선언된 selectedSlot이 null이라면 (첫번째클릭이면) 
	selectedSlot에 파라미터로 받은 clickedSlot을 할당한다.
	 ImageMovingCoroutine에서 clickedSlot하위의 이미지의 Alpha값변경을 위해  clickedSlot의 이미지컴포넌트를 미리선언된 firstClickImage 에 할당한다
	두번째슬롯을 클릭했을 때 위치를 바꿔주기 위해 clickedSlot의 위치를 미리선언된 Vector2 변수에 저장
	ImageMovingCoroutine에서 첫번째 슬롯 하위의 이미지를 움직이기위해 미리선언된 RectTransform 변수에 selectedSlot의 자식인 이미지오브젝트의 RectTransform을 할당한다.
	ImageMovingCoroutine 실행	

	두번째 클릭이라면 
	두번째클릭한슬롯의 포지션을 저장하고 
	ResetImageAlpha함수 호출한 뒤  SwapItems(selectedSlot, clickedSlot) 함수 호출하고 selectedSlot 을 다시  = null 로 설정한다
}

ResetImageAlpha() 
{
	ImageMovingCoroutine 에서 변경한 알파값을 다시 원상복구시킨다.
}

SwapItems (Slot firstSlot, Slot secondSlot) => 첫번째클릭한 슬롯과 두번째 클릭한 슬롯을 받는다.
{
	비어있는 GameObject타입의 List를 선언하고 slots 딕셔너리의 List를 순회하며	slotList.Value.Contains(firstSlot.gameObject)이용해
	해당 리스트에 firstSlot이 있다면 그 리스트를 위에 선언한 빈 리스트에 할당한다.
	SlotList.IndexOf(firstSlot.gameObject) 를 사용해 int 타입 변수에 각 슬롯의 인덱스를 저장하고 
	해당 두slot오브젝트를 임시로 저장한 뒤 위치를 바꾸고 리스트를 지우고 다시 Insert 해준다
}
